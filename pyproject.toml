[project]
name = "arclet-letoderea"
version = "0.19.4"
description = "A high-performance, simple-structured event system, relies on asyncio"
authors = [
    {name = "RF-Tar-Railt", email = "rf_tar_railt@qq.com"},
]
dependencies = [
    "tarina<0.8.0,>=0.7.0",
    "typing-extensions>=4.12.0",
]
requires-python = ">=3.10,<4.0"
readme = "README.md"
license = {text = "MIT"}
keywords = ["asyncio", "event-system", "dispatch", "dependency-injection"]
classifiers = [
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Typing :: Typed",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
]

[project.urls]
Repository = "https://github.com/ArcletProject/Letoderea"
Homepage = "https://github.com/ArcletProject/Letoderea"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true
[tool.pdm.build]
includes = ["arclet"]

[tool.pdm.dev-dependencies]
dev = [
    "isort>=5.13.2",
    "black>=24.10.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.3",
    "coverage>=7.6.12",
]
[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
'''

[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = true
extra_standard_library = ["typing_extensions"]

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = ["E", "W", "F", "UP", "C", "T", "Q"]
ignore = ["E402", "F403", "F405", "C901", "UP038", "T201", "T203"]

[tool.pyright]
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "basic"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.coverage.run]
branch = true
source = ["."]
omit = ["./examples/*.py", "exam*.py", "./arclet/letoderea/ref.py", "benchmark.py"]

[tool.coverage.report]

# Regexes for lines to exclude from consideration
exclude_lines = [
    # standard pragma
    "pragma: no cover",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING( is True)?:",
    "\\.\\.\\.",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain overload method / functions
    "@(typing\\.)?overload",
    "def __repr__",
    "def __str__",
    "def __eq__",
    "except ImportError:",
]

[tool.pdm.scripts]
test = {composite = ["coverage run --rcfile=pyproject.toml -m pytest -vv -Wignore", "coverage xml", "coverage report -m"]}
